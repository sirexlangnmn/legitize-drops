Database.php usage

Initiating

Initiate a database connection using by creating a new Database() object.

$database = new Database($database_name, $username, $password, $host); // $host is optional and defaults to 'localhost'

or you can edit the __constructor method on database.php and add your database configuration.



Select

Select rows from a database table

$database->select($table, $where, $limit, $order, $where_mode, $select_fields);

Arguments:

* string $table - name of the table to select from
* array/string $where - array or string holding the filters/'WHERE' clause for the query
* int/string $limit - integer or string holding the 'LIMIT' clause
* string $order - string holding the 'ORDER BY' clause
* string $where_mode - whether to add an 'AND' or 'OR' after each item in the $where array, defaults to AND
* string $select_fields - the fields to select (SELECT <$select_fields> FROM ...), defaults to *

Reading results

Reading the results can be done with the following functions:

* $database->count() returns the number of selected rows, equal to mysql_num_rows()
* $database->row() returns the first row that matches the query as an array
* $database->result() returns all matches rows as an array containing row objects
* $database->result_array() returns all matches rows as an array containing row arrays
* $database->row_array() returns the first row that matches the query as an object (stdClass)

Please note that you can call any of these functions also directly after the $database->select() call, like shown below:

echo $database->select('candy', array('sweet' => 1), 10)->count();


There are a few other methods available for queries that might come in handy: //I usually do this when debugging.

* $database->sql() returns the sql query that was last executed.


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Insert 

Insert data into a database table

Usage:

$database->insert($table, $fields=array());

Example:

$database->insert(
	'candy',
	array(
		'name' => 'Kitkat original',
		'sweet' => 1,
		'spicey' => 0,
		'brand' => 'Kitkat',
		'amount_per_pack' => 4
	)
);
Tip! You can call $database->id() immeadiately after a $database->insert() call to get the ID of the last inserted row.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Update

Update one or more rows of a database table

Usage:

$database->update($table, $fields=array(), $where=array())
Example:

// set amount per pack to 5 for all Kitkats
$database->update(
	'candy',
	array( // fields to be updated
		'amount_per_pack' => 5
	),
	array( // 'WHERE' clause
		'brand' => 'Kitkat'
	)
);

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Delete
Remove one or more rows from a database table

Usage:

$database->delete($table, $where=array())
Example:

// delete all Kitkat candy
$database->delete(
	'candy',
	array( // 'WHERE' clause
		'brand' => 'Kitkat'
	)
);